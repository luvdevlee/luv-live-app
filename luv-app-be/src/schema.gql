# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  access_token: String!
  refresh_token: String!
  user: User!
}

input CreateStreamDto {
  category: String!
  description: String
  scheduledAt: String
  thumbnail: String
  title: String!
}

input CreateUserDto {
  avatar_url: String
  display_name: String
  email: String!
  google_id: String
  is_active: Boolean
  password: String
  role: UserRole
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  message: String!
  success: Boolean!
}

type Mutation {
  """Change user password"""
  changePassword(newPassword: String!, oldPassword: String!): Boolean!
  createStream(createStreamDto: CreateStreamDto!, streamerId: String!): StreamResponse!

  """Create a new user (admin only)"""
  createUser(createUserDto: CreateUserDto!): UserResponse!
  endStream(id: String!): StreamResponse!

  """Login with email and password"""
  login(loginInput: LoginInput!): AuthResponse!

  """Logout from the system"""
  logout: LogoutResponse!

  """Refresh access token"""
  refreshToken(refreshTokenInput: RefreshTokenInput!): RefreshTokenResponse!

  """Register a new account"""
  register(registerUserDto: RegisterUserDto!): AuthResponse!

  """Register a new user account"""
  registerUser(registerUserDto: RegisterUserDto!): UserResponse!
  removeStream(id: String!): StreamResponse!

  """Deactivate user account (admin only)"""
  removeUser(id: String!): UserResponse!
  setPlaybackUrl(id: String!, playbackUrl: String!): StreamResponse!
  startStream(id: String!): StreamResponse!
  updateStream(id: String!, updateStreamDto: UpdateStreamDto!): StreamResponse!

  """Update user profile"""
  updateUser(id: String!, updateUserDto: UpdateUserDto!): UserResponse!
}

type Query {
  liveStreams: [StreamResponse!]!

  """Get current user profile"""
  me: UserResponse!
  scheduledStreams: [StreamResponse!]!
  stream(id: String!): StreamResponse!
  streams: [StreamResponse!]!
  streamsByCategory(category: String!): [StreamResponse!]!
  streamsByStreamer(streamerId: String!): [StreamResponse!]!

  """Get user by ID"""
  user(id: String!): UserResponse!

  """Get user by username (public)"""
  userByUsername(username: String!): UserResponse!

  """Get user statistics (admin only)"""
  userStats: UserStatsResponse!

  """Get all active users (admin only)"""
  users: [UserResponse!]!
}

input RefreshTokenInput {
  refresh_token: String!
}

type RefreshTokenResponse {
  access_token: String!
}

input RegisterUserDto {
  avatar_url: String
  display_name: String
  email: String!
  password: String!
  username: String!
}

type StreamResponse {
  _id: ID!
  category: String!
  createdAt: DateTime!
  description: String
  endedAt: DateTime
  maxViewers: Float!
  playbackUrl: String
  scheduledAt: DateTime
  startedAt: DateTime
  status: StreamStatus!
  streamKey: String
  streamerId: ID!
  thumbnail: String
  title: String!
  totalViewers: Float!
  updatedAt: DateTime!
}

"""Stream status"""
enum StreamStatus {
  ENDED
  LIVE
  SCHEDULED
}

input UpdateStreamDto {
  category: String
  description: String
  scheduledAt: String
  thumbnail: String
  title: String
}

input UpdateUserDto {
  avatar_url: String
  display_name: String
  email: String
  google_id: String
  is_active: Boolean
  role: UserRole
  username: String
}

type User {
  _id: ID!
  avatar_url: String
  created_at: DateTime!
  display_name: String
  email: String!
  google_id: String
  is_active: Boolean!
  last_login_at: DateTime
  role: UserRole!
  updated_at: DateTime!
  username: String!
}

type UserResponse {
  _id: ID!
  avatar_url: String
  created_at: DateTime!
  display_name: String
  email: String!
  google_id: String
  is_active: Boolean!
  last_login_at: DateTime
  role: UserRole!
  updated_at: DateTime!
  username: String!
}

"""User roles in the system"""
enum UserRole {
  ADMIN
  STREAMER
  VIEWER
}

type UserStatsResponse {
  activeUsers: Int!
  admins: Int!
  streamers: Int!
  totalUsers: Int!
  viewers: Int!
}